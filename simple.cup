/**********************************************************************
 Java CUP specification for a parser for Simple programs
 **********************************************************************/

import java_cup.runtime.*;

parser code {:

public void syntax_error(Symbol currToken) {
    Errors.fatal(((TokenVal)currToken.value).linenum,
	         ((TokenVal)currToken.value).charnum,
		 "Syntax error");
}

:};


/* Terminals (tokens returned by the scanner) */
terminal TokenVal       PUBLIC;
terminal TokenVal       CLASS;
terminal TokenVal       STATIC;
terminal TokenVal       INT;
terminal TokenVal       BOOLEAN;
terminal TokenVal       STRING;
terminal TokenVal       VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal TokenVal       IF;
terminal TokenVal       ELSE;
terminal TokenVal       WHILE;
terminal TokenVal 	    DO;
terminal TokenVal       PRINT;
terminal TokenVal       RETURN;
terminal IdIdent        ID;
terminal IntLitTokenVal INTLITERAL;
terminal StringIdent    STRINGLITERAL;
terminal TokenVal       LCURLY;
terminal TokenVal       RCURLY;
terminal TokenVal       LPAREN;
terminal TokenVal       RPAREN;
terminal TokenVal       COMMA;
terminal TokenVal       ASSIGN;
terminal TokenVal       SEMICOLON;
terminal TokenVal       PLUS;
terminal TokenVal       MINUS;
terminal TokenVal       TIMES;
terminal TokenVal       DIVIDE;
terminal TokenVal       NOT;
terminal TokenVal       AND;
terminal TokenVal       OR;
terminal TokenVal       EQUALS;
terminal TokenVal       NOTEQUALS;
terminal TokenVal       LESS;
terminal TokenVal       GREATER;
terminal TokenVal       LESSEQ;
terminal TokenVal       GREATEREQ;
terminal TokanVal       POWER;

terminal UMINUS;
/* Non-terminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal ClassBodyNode    classBody;
non terminal MethodBodyNode   methodBody;

non terminal DeclNode	      decl;
non terminal FieldDeclNode    fieldDecl;
non terminal MethodDeclNode   methodDecl;
non terminal FormalDeclNode   formalDecl;

non terminal Sequence         declList;
non terminal Sequence         stmtList;
non terminal Sequence         varDeclList;
non terminal Sequence         actualList;
non terminal Sequence         formalsList;

non terminal ExpNode          exp;
non terminal TypeNode	      type;
non terminal IdNode	          id;
non terminal IntLitNode       intLit;
non terminal StringLitNode    strLit;
non terminal FormalsNode      formals;
non terminal VarDeclNode      varDecl;
non terminal StmtNode         stmt;

precedence left AND, OR;
precedence left NOT;
precedence left EQUALS, NOTEQUALS, LESS, LESSEQ, GREATEREQ, GREATER;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right POWER;
precedence left UMINUS;

start with program;

/*
 * grammar with actions
 *
 * add more here
 */
program		::= PUBLIC CLASS id:i LCURLY classBody:c RCURLY
            {: RESULT = new ProgramNode(i, c);
            :}
            ;

classBody	::= declList:d
            {: RESULT = new ClassBodyNode(new DeclListNode(d));
            :}
            ;

declList    ::= declList:dl decl:d
            {: dl.addToEnd(d);
               RESULT = dl;
            :}
            | /* epsilon */
            {: RESULT = new Sequence();
            :}
            ;

decl	    ::= fieldDecl:v
            {: RESULT = v;
            :}
            |
            methodDecl:md
            {: RESULT = md;
            :}
            ;

fieldDecl	::= STATIC type:t id:i SEMICOLON
            {: RESULT = new FieldDeclNode(t, i);
            :}
            ;

methodDecl	::= PUBLIC STATIC VOID id:i formals:f methodBody:mb
            {: RESULT = new MethodDeclVoidNode(i,f,mb);
            :}
            | PUBLIC STATIC INT id:i formals:f methodBody:mb
            {: RESULT = new MethodDeclIntNode(i,f,mb);
            :}
            ;

formals     ::= LPAREN RPAREN
            {: FormalsListNode f = new FormalsListNode(new Sequence());
            RESULT = new FormalsNode(f);
            :}
            | LPAREN formalsList:fl RPAREN
            {: RESULT = new FormalsNode(new FormalsListNode(fl));
            :}
            ;

formalsList	::= formalDecl:fd
            {:
                Sequence S = new Sequence();
                S.addToEnd(fd);
                RESULT = S;
            :}
            | formalDecl:fd COMMA formalsList:fl
            {:  fl.addToFront(fd);
                RESULT = fl;
            :}
            ;

formalDecl	::= type:t id:i
            {: RESULT = new FormalDeclNode(t, i);
            :}
            ;

type	    ::= INT
            {: RESULT = new IntNode();
            :}
            | BOOLEAN
            {: RESULT = new BooleanNode();
                    :}
            | STRING
            {: RESULT = new StringNode();
            :}
            ;

id          ::= ID:i
            {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
            :}
            ;

methodBody  ::= LCURLY varDeclList:i stmtList:t RCURLY //LCURLY varDeclList:i stmtList:t RCURLY
            {:
                RESULT = new MethodBodyNode(new VarDeclListNode(i),new StmtListNode(t));
            :}
            ;

varDeclList ::= varDeclList:vdl varDecl:vd
            {:
               vdl.addToEnd(vd);
               RESULT = vdl;
            :}
            | /* epsilon */
            {: RESULT = new Sequence();
            :}
            ;

varDecl     ::= type:t id:i SEMICOLON
            {: RESULT = new VarDeclNode(t,i);
            :}
            ;

stmtList    ::= stmtList:stml stmt:stm
            {:
            stml.addToEnd(stm);
            RESULT = stml;
            :}
            | /* epsilon */
            {: RESULT = new Sequence();
            :};

stmt        ::= RETURN SEMICOLON
            {:
            RESULT = new ReturnStmtNode();
            :}
            | PRINT LPAREN exp:e1 RPAREN SEMICOLON
            {:
              RESULT = new PrintStmtNode(e1);
            :}
            | id:i ASSIGN exp:e1 SEMICOLON
            {:
              RESULT = new AssignStmtNode(i,e1);
            :}
            | IF LPAREN exp:e1 RPAREN LCURLY stmtList:sl RCURLY
            {:
              RESULT = new IfStmtNode(e1,new StmtListNode(sl));
            :}
            | IF LPAREN exp:e1 RPAREN LCURLY stmtList:sl1 RCURLY ELSE LCURLY stmtList:sl2 RCURLY
            {:
              RESULT = new IfElseStmtNode(e1,new StmtListNode(sl1),new StmtListNode(sl2));
            :}
            | DO LCURLY stmtList:sl RCURLY WHILE LPAREN exp:e1 RPAREN
            {:
              RESULT = new WhileStmtNode(e1, new StmtListNode(sl));
            :}
            | id:i LPAREN actualList:al RPAREN SEMICOLON
            {:
              RESULT = new CallStmtNode(i, new ExpListNode(al));
            :}
            | id:i LPAREN RPAREN SEMICOLON
            {:
              RESULT = new CallStmtNode(i);
            :}
            | RETURN exp:e1 SEMICOLON {:
              RESULT = new ReturnStmtNode(e1);
            :}
            | LCURLY varDeclList:vdl stmtList:sml RCURLY
            {:
              RESULT = new BracketStmtNode(new VarDeclListNode(vdl), new StmtListNode(sml));
            :}
            ;

exp         ::= exp:e1 PLUS exp:e2
            {:
                RESULT = new PlusNode(e1, e2);
            :}
            | exp:e1 MINUS exp:e2
            {:
                RESULT = new MinusNode(e1, e2);
            :}
            | exp:e1 TIMES exp:e2
            {:
                 RESULT = new TimesNode(e1, e2);
            :}
            | exp:e1 DIVIDE exp:e2
            {:
                RESULT = new DivideNode(e1, e2);
            :}
            | NOT exp:e1
            {:
                RESULT = new NotNode(e1);
            :}
            | exp:e1 AND exp:e2
            {:
                RESULT = new AndNode(e1, e2);
            :}
            | exp:e1 OR exp:e2
            {:
                RESULT = new OrNode(e1, e2);
            :}
            | exp:e1 EQUALS exp:e2
            {:
                RESULT = new EqualsNode(e1, e2);
            :}
            | exp:e1 NOTEQUALS exp:e2
            {:
                RESULT = new NotEqualsNode(e1, e2);
            :}
            | exp:e1 LESS exp:e2
            {:
                RESULT = new LessNode(e1, e2);
            :}
            | exp:e1 GREATER exp:e2
            {:
                RESULT = new GreaterNode(e1, e2);
            :}
            | exp:e1 LESSEQ exp:e2
            {:
                RESULT = new LessEqNode(e1, e2);
            :}
            | exp:e1 GREATEREQ exp:e2
            {:
                RESULT = new GreaterEqNode(e1, e2);
            :}
            | exp:e1 POWER exp:e2
            {:
                RESULT = new PowerNode(e1, e2);
            :}
            | MINUS exp:e1
            {:
                 RESULT = new UnaryMinusNode(e1);
            :}
            %prec UMINUS

            | TRUE:i
            {:
                RESULT = new TrueNode(i.linenum, i.charnum);
            :}
            | FALSE:i
            {:
                RESULT = new FalseNode(i.linenum, i.charnum);
            :}
            | ID:i
            {:
               RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
            :}
            | intLit:i
            {:
               RESULT = i;
            :}
            | strLit:i
            {:
               RESULT = i;
            :}
            | LPAREN exp:e1 RPAREN
            {:
                RESULT = new BracketsNode(e1);
            :}
            | id:i LPAREN RPAREN SEMICOLON
            {:
                RESULT = new CallExpNode(i);
            :}
            | id:i LPAREN actualList:al RPAREN SEMICOLON
            {:
               RESULT = new CallExpNode(i, new ExpListNode(al));
            :}
            ;

actualList  ::= exp:e1
            {:
                Sequence S = new Sequence();
                S.addToEnd(e1);
                RESULT = S;
            :}
            | actualList:al COMMA exp:e1
            {:
                al.addToEnd(e1);
                RESULT = al;
            :}
            ;

intLit      ::= INTLITERAL:i
            {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
            :}
            ;

strLit      ::= STRINGLITERAL:i
            {: RESULT = new StringLitNode(i.linenum, i.charnum, i.strIdent);
            :}
            ;
